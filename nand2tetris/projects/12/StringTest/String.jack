// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int max_len, len;
    field Array _string;
    field boolean empty_string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max_len = maxLength;
        let len = 0;
        if (maxLength > 0) {
            let _string = Memory.alloc(maxLength);
            let empty_string = false;
        }
        else {
            let empty_string = true;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~empty_string){
            do Memory.deAlloc(_string);            
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return _string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let _string[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let _string[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let _string[len - 1] = 0;
        let len =  len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var char temp_char;
        var boolean sign;
        var int index, result;
        let index = 0;
        let result = 0;
        let temp_char = charAt(index);
        if (temp_char = 45) {
            let sign = false;
            let index = index + 1;
            let temp_char = charAt(index);
        }
        else {
            let sign = true;
        }
        while ((index < len) & (temp_char > 47) & (temp_char < 58)) {
            let result = (result * 10) + (temp_char - 48);
            let index = index + 1;
            let temp_char = charAt(index);
        }
        if (sign) {
            return result;
        }
        else {
            return -result;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean sign;
        var char c;
        var int temp, index;
        let len = 0;
        let sign = (val > 0);
        let val = Math.abs(val);
        while (val > 0) {
            let temp = val / 10;
            let c = (val - (temp * 10)) + 48;
            do setCharAt(len, c);
            let len = len + 1;
            let val = temp;
        }
        let index = 0;
        let temp = len / 2;
        while (index < temp){
            let c = _string[index];
            let _string[index] = _string[(len - 1) - index];
            let _string[(len - 1) - index] = c;
            let index = index + 1;
        } 
        if (~(sign)){
            let index = len;
            while (index > 0) {
                let _string[index] = _string[index - 1];
                let index = index - 1;
            }
            let _string[index] = 45;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
