<class>
  <keyword> class </keyword>
  <identifier>
    <inTable> False </inTable>
    <varName> Main </varName>
    <kind> class </kind>
    <condition> defined </condition>
  </identifier>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <inTable> False </inTable>
      <varName> main </varName>
      <kind> subroutine </kind>
      <condition> defined </condition>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier>
          <inTable> False </inTable>
          <varName> SquareGame </varName>
          <kind> class </kind>
          <condition> defined </condition>
        </identifier>
        <identifier>
          <inTable> True </inTable>
          <varName> game </varName>
          <kind> var </kind>
          <condition> defined </condition>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <inTable> True </inTable>
            <varName> game </varName>
            <kind> var </kind>
            <condition> used </condition>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <inTable> False </inTable>
                <varName> SquareGame </varName>
                <kind> class </kind>
                <condition> defined </condition>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <inTable> False </inTable>
                <varName> new </varName>
                <kind> subroutine </kind>
                <condition> defined </condition>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <inTable> True </inTable>
            <varName> game </varName>
            <kind> var </kind>
            <condition> used </condition>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <inTable> False </inTable>
            <varName> run </varName>
            <kind> subroutine </kind>
            <condition> defined </condition>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <inTable> True </inTable>
            <varName> game </varName>
            <kind> var </kind>
            <condition> used </condition>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <inTable> False </inTable>
            <varName> dispose </varName>
            <kind> subroutine </kind>
            <condition> defined </condition>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
