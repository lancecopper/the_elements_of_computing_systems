<class>
  <keyword> class </keyword>
  <identifier>
    <inTable> False </inTable>
    <kind> class </kind>
    <varName> Main </varName>
    <condition> defined </condition>
  </identifier>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <inTable> False </inTable>
      <kind> subroutine </kind>
      <varName> main </varName>
      <condition> defined </condition>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <inTable> True </inTable>
          <kind> var </kind>
          <varName> value </varName>
          <condition> defined </condition>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <inTable> False </inTable>
            <kind> class </kind>
            <varName> Main </varName>
            <condition> defined </condition>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <inTable> False </inTable>
            <kind> subroutine </kind>
            <varName> fillMemory </varName>
            <condition> defined </condition>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 8001 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 16 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <inTable> True </inTable>
            <kind> var </kind>
            <varName> value </varName>
            <condition> used </condition>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier>
                <inTable> False </inTable>
                <kind> class </kind>
                <varName> Memory </varName>
                <condition> defined </condition>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <inTable> False </inTable>
                <kind> subroutine </kind>
                <varName> peek </varName>
                <condition> defined </condition>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 8000 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>
            <inTable> False </inTable>
            <kind> class </kind>
            <varName> Main </varName>
            <condition> defined </condition>
          </identifier>
          <symbol> . </symbol>
          <identifier>
            <inTable> False </inTable>
            <kind> subroutine </kind>
            <varName> convert </varName>
            <condition> defined </condition>
          </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>
                  <inTable> True </inTable>
                  <kind> var </kind>
                  <varName> value </varName>
                  <condition> used </condition>
                </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <inTable> False </inTable>
      <kind> subroutine </kind>
      <varName> convert </varName>
      <condition> defined </condition>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <inTable> True </inTable>
        <kind> argument </kind>
        <varName> value </varName>
        <condition> defined </condition>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier>
          <inTable> True </inTable>
          <kind> var </kind>
          <varName> mask </varName>
          <condition> defined </condition>
        </identifier>
        <symbol> , </symbol>
        <identifier>
          <inTable> True </inTable>
          <kind> var </kind>
          <varName> position </varName>
          <condition> defined </condition>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier>
          <inTable> True </inTable>
          <kind> var </kind>
          <varName> loop </varName>
          <condition> defined </condition>
        </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier>
            <inTable> True </inTable>
            <kind> var </kind>
            <varName> loop </varName>
            <condition> used </condition>
          </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> true </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <inTable> True </inTable>
                <kind> var </kind>
                <varName> loop </varName>
                <condition> used </condition>
              </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <inTable> True </inTable>
                <kind> var </kind>
                <varName> position </varName>
                <condition> used </condition>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <inTable> True </inTable>
                    <kind> var </kind>
                    <varName> position </varName>
                    <condition> used </condition>
                  </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <inTable> True </inTable>
                <kind> var </kind>
                <varName> mask </varName>
                <condition> used </condition>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <inTable> False </inTable>
                    <kind> class </kind>
                    <varName> Main </varName>
                    <condition> defined </condition>
                  </identifier>
                  <symbol> . </symbol>
                  <identifier>
                    <inTable> False </inTable>
                    <kind> subroutine </kind>
                    <varName> nextMask </varName>
                    <condition> defined </condition>
                  </identifier>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <identifier>
                          <inTable> True </inTable>
                          <kind> var </kind>
                          <varName> mask </varName>
                          <condition> used </condition>
                        </identifier>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier>
                          <inTable> True </inTable>
                          <kind> var </kind>
                          <varName> position </varName>
                          <condition> used </condition>
                        </identifier>
                      </term>
                      <symbol> &gt; </symbol>
                      <term>
                        <integerConstant> 16 </integerConstant>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier>
                                  <inTable> True </inTable>
                                  <kind> argument </kind>
                                  <varName> value </varName>
                                  <condition> defined </condition>
                                </identifier>
                              </term>
                              <symbol> &amp; </symbol>
                              <term>
                                <identifier>
                                  <inTable> True </inTable>
                                  <kind> var </kind>
                                  <varName> mask </varName>
                                  <condition> used </condition>
                                </identifier>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier>
                        <inTable> False </inTable>
                        <kind> class </kind>
                        <varName> Memory </varName>
                        <condition> defined </condition>
                      </identifier>
                      <symbol> . </symbol>
                      <identifier>
                        <inTable> False </inTable>
                        <kind> subroutine </kind>
                        <varName> poke </varName>
                        <condition> defined </condition>
                      </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 8000 </integerConstant>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <identifier>
                              <inTable> True </inTable>
                              <kind> var </kind>
                              <varName> position </varName>
                              <condition> used </condition>
                            </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier>
                        <inTable> False </inTable>
                        <kind> class </kind>
                        <varName> Memory </varName>
                        <condition> defined </condition>
                      </identifier>
                      <symbol> . </symbol>
                      <identifier>
                        <inTable> False </inTable>
                        <kind> subroutine </kind>
                        <varName> poke </varName>
                        <condition> defined </condition>
                      </identifier>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 8000 </integerConstant>
                          </term>
                          <symbol> + </symbol>
                          <term>
                            <identifier>
                              <inTable> True </inTable>
                              <kind> var </kind>
                              <varName> position </varName>
                              <condition> used </condition>
                            </identifier>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier>
                    <inTable> True </inTable>
                    <kind> var </kind>
                    <varName> loop </varName>
                    <condition> used </condition>
                  </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <keyword> false </keyword>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> int </keyword>
    <identifier>
      <inTable> False </inTable>
      <kind> subroutine </kind>
      <varName> nextMask </varName>
      <condition> defined </condition>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <inTable> True </inTable>
        <kind> argument </kind>
        <varName> mask </varName>
        <condition> defined </condition>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <inTable> True </inTable>
                <kind> argument </kind>
                <varName> mask </varName>
                <condition> defined </condition>
              </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <returnStatement>
              <keyword> return </keyword>
              <expression>
                <term>
                  <identifier>
                    <inTable> True </inTable>
                    <kind> argument </kind>
                    <varName> mask </varName>
                    <condition> defined </condition>
                  </identifier>
                </term>
                <symbol> * </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </returnStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier>
      <inTable> False </inTable>
      <kind> subroutine </kind>
      <varName> fillMemory </varName>
      <condition> defined </condition>
    </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier>
        <inTable> True </inTable>
        <kind> argument </kind>
        <varName> startAddress </varName>
        <condition> defined </condition>
      </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier>
        <inTable> True </inTable>
        <kind> argument </kind>
        <varName> length </varName>
        <condition> defined </condition>
      </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier>
        <inTable> True </inTable>
        <kind> argument </kind>
        <varName> value </varName>
        <condition> defined </condition>
      </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier>
                <inTable> True </inTable>
                <kind> argument </kind>
                <varName> length </varName>
                <condition> defined </condition>
              </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>
                <inTable> False </inTable>
                <kind> class </kind>
                <varName> Memory </varName>
                <condition> defined </condition>
              </identifier>
              <symbol> . </symbol>
              <identifier>
                <inTable> False </inTable>
                <kind> subroutine </kind>
                <varName> poke </varName>
                <condition> defined </condition>
              </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier>
                      <inTable> True </inTable>
                      <kind> argument </kind>
                      <varName> startAddress </varName>
                      <condition> defined </condition>
                    </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier>
                      <inTable> True </inTable>
                      <kind> argument </kind>
                      <varName> value </varName>
                      <condition> defined </condition>
                    </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <inTable> True </inTable>
                <kind> argument </kind>
                <varName> length </varName>
                <condition> used </condition>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <inTable> True </inTable>
                    <kind> argument </kind>
                    <varName> length </varName>
                    <condition> used </condition>
                  </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier>
                <inTable> True </inTable>
                <kind> argument </kind>
                <varName> startAddress </varName>
                <condition> used </condition>
              </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier>
                    <inTable> True </inTable>
                    <kind> argument </kind>
                    <varName> startAddress </varName>
                    <condition> used </condition>
                  </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
